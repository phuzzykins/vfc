################################################################################
####
#### GCODE macros
####
################################################################################

[pause_resume]

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT
	END_PRINT

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    SMART_PARK
  
[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    RESTORE_GCODE_STATE NAME=PAUSE_state
    BASE_RESUME

[gcode_macro GO_TO_NEUTRAL_POSITION]
gcode:
	HOME
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y50 Z50 F3600
	
[gcode_macro GO_TO_CENTER_OF_PRINT_VOLUME]
gcode:
	HOME
	G90
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2}
	
[delayed_gcode tune_motors_helper]
gcode:
	_SUPPRESS_STALL_DETECTION
	SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0
	SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0
	M117 RESET WHEN DONE
	
[gcode_macro TUNE_MOTORS]
gcode:
	GO_TO_CENTER_OF_PRINT_VOLUME
	UPDATE_DELAYED_GCODE ID=tune_motors_helper DURATION=1
	
[gcode_macro START_PRINT]
gcode:
	CLEAR_PAUSE
    
    M117
    {% set BED_TEMP = params.BED_TEMP|default(0)|float %}
    {% set T0_TEMP = params.T0_TEMP|default(0)|float %}
	
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}
	
	{% if T0_TEMP >= 160 %}
		SET_HEATER_TEMPERATURE HEATER=extruder TARGET=140
	{% endif %}

	{% if BED_TEMP > 0 %}
		SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}
	{% endif %}

	
    M117 Heating Up
	{% if BED_TEMP > 0 %}
		TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP - 5} MAXIMUM={BED_TEMP +1 }
	{% endif %}
    
    M117 Calibrating Bed Mesh
    G28
    BED_MESH_CALIBRATE
    SMART_PARK

    M117 Final Heating
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET={T0_TEMP}
	
	{% if BED_TEMP > 0 %}
		TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP} MAXIMUM={BED_TEMP + 1}
	{% endif %}
	
	{% if T0_TEMP > 0 %}
		TEMPERATURE_WAIT SENSOR=extruder MINIMUM={T0_TEMP} MAXIMUM={T0_TEMP + 1}
	{% endif %}
	
	M82
	G90
    
	{% if T0_TEMP > 0 %}
        M117 Priming
        LINE_PURGE
	{% endif %}

    M117 Printing
	

[gcode_macro END_PRINT]
gcode:
    M117 Finishing Up

	TURN_OFF_HEATERS
	SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
	CLEAR_PAUSE
	##### set park positon for x and y #####
    {% set x_park = printer.toolhead.axis_maximum.x/2 %}
    {% set y_park = 50 %}
    ##### calculate save lift position #####
	{% set min_z = printer.toolhead.axis_maximum.z|float/2 %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set cur_z = printer.toolhead.position.z|float %}
	{% set z_park = cur_z + 50.0 %}
	
	{% if z_park > max_z %}
        {% set z_park = max_z %}
    {% endif %}
	
	{% if z_park < min_z %}
        {% set z_park = min_z %}
    {% endif %}
	
	G90
	G0 X{x_park} Y{y_park} Z{z_park} F3000
    M107
    M117 
	
[gcode_macro BOUNDS_CHECK]
gcode:
	HOME
	G1 Z5
	G1 X{printer.toolhead.axis_minimum.x/2} Y{printer.toolhead.axis_minimum.y} F3600
	G1 X{printer.toolhead.axis_maximum.x}
	G1 Y{printer.toolhead.axis_maximum.y}
	G1 X{printer.toolhead.axis_minimum.x/2}
	G1 Y{printer.toolhead.axis_minimum.y/2}
	G1 Z{printer.toolhead.axis_maximum.z - 2}
	G1 X{printer.toolhead.axis_maximum.x}
	G1 Y{printer.toolhead.axis_maximum.y}
	G1 X{printer.toolhead.axis_minimum.x/2}
	G1 Y{printer.toolhead.axis_minimum.y/2}
	G1 Z0.5
	
[gcode_macro FORCE_HOME]
gcode:
	G28
	GO_TO_NEUTRAL_POSITION
	
[gcode_macro HOME]
gcode:
	{% if not "xyz" in printer.toolhead.homed_axes %}
		G28
	{% endif %}
	

[gcode_macro _DUMP_STATE]
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { action_respond_info("printer['%s'].%s = %s"
                               % (name1, name2, printer[name1][name2])) }
      {% else %}
         { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
      {% endfor %}
   {% endfor %}
	
#####
##### These macros decide what action to take when the HLFB triggers
#####
[gcode_macro _SUPPRESS_STALL_DETECTION]
gcode:
	SET_GCODE_VARIABLE MACRO=_MOTOR_STALLED VARIABLE=suppress VALUE=1
	
[gcode_macro _ENABLE_STALL_DETECTION]
gcode:
	UPDATE_DELAYED_GCODE ID=_clear_suppress DURATION=0.1
	
[delayed_gcode _clear_suppress]
gcode:
	SET_GCODE_VARIABLE MACRO=_MOTOR_STALLED VARIABLE=suppress VALUE=0
	
[delayed_gcode _clear_throttle]
gcode:
	SET_GCODE_VARIABLE MACRO=_MOTOR_STALLED VARIABLE=throttle VALUE=0

[gcode_macro _MOTOR_STALLED]
variable_suppress: 1
variable_throttle: 0
gcode:
	{% set AXIS = params.AXIS|default("UNKNOWN") %}
	{% if not suppress %}
		{% if not throttle %}
			M117 SHUTDOWN:{AXIS} STALL
			PAUSE
			{action_respond_info('The %s axis motor has stalled!' %( AXIS))}
			#{action_emergency_stop('The %s axis motor has stalled!' %( AXIS))}
			SET_GCODE_VARIABLE MACRO=_MOTOR_STALLED VARIABLE=throttle VALUE=1
			UPDATE_DELAYED_GCODE ID=_clear_throttle DURATION=5
		{% endif %}
	{% endif %}

[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}
	

